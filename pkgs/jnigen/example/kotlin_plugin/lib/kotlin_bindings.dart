// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: Example
class Example extends jni.JObject {
  @override
  late final jni.JObjType<Example> $type = type;

  Example.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"Example");

  /// The type which includes information such as the signature of this class.
  static const type = $ExampleType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Example() {
    return Example.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_thinkBeforeAnswering = _class.instanceMethodId(
    r"thinkBeforeAnswering",
    r"(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _thinkBeforeAnswering = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Object thinkBeforeAnswering(kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JString> thinkBeforeAnswering() async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _thinkBeforeAnswering(reference.pointer,
            _id_thinkBeforeAnswering as jni.JMethodIDPtr, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JStringType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JStringType().fromReference($o);
  }
}

final class $ExampleType extends jni.JObjType<Example> {
  const $ExampleType();

  @override
  String get signature => r"LExample;";

  @override
  Example fromReference(jni.JReference reference) =>
      Example.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExampleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExampleType) && other is $ExampleType;
  }
}

/// from: Divider
class Divider extends jni.JObject {
  @override
  late final jni.JObjType<Divider> $type = type;

  Divider.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"Divider");

  /// The type which includes information such as the signature of this class.
  static const type = $DividerType();
  static final _id_divide = _class.instanceMethodId(
    r"divide",
    r"(II)I",
  );

  static final _divide = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int32, ffi.Int32)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public abstract int divide(int i, int i1)
  int divide(
    int i,
    int i1,
  ) {
    return _divide(reference.pointer, _id_divide as jni.JMethodIDPtr, i, i1)
        .integer;
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $DividerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"divide(II)I") {
        final $r = _$impls[$p]!.divide(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni.JInteger($r).reference.toPointer();
      }
    } catch (e) {
      if (e is jni.JObject &&
          jni.Jni.env.IsInstanceOf(
              e.reference.pointer, jThrowableClass.reference.pointer)) {
        return ProtectedJniExtensions.newDartException(e.toString(), e);
      }
      return ProtectedJniExtensions.newDartException(e.toString(), null);
    }
    return jni.nullptr;
  }

  factory Divider.implement(
    $DividerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Divider.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"Divider",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $DividerImpl {
  factory $DividerImpl({
    required int Function(int i, int i1) divide,
  }) = _$DividerImpl;

  int divide(int i, int i1);
}

class _$DividerImpl implements $DividerImpl {
  _$DividerImpl({
    required int Function(int i, int i1) divide,
  }) : _divide = divide;

  final int Function(int i, int i1) _divide;

  int divide(int i, int i1) {
    return _divide(i, i1);
  }
}

final class $DividerType extends jni.JObjType<Divider> {
  const $DividerType();

  @override
  String get signature => r"LDivider;";

  @override
  Divider fromReference(jni.JReference reference) =>
      Divider.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DividerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DividerType) && other is $DividerType;
  }
}

/// from: DividerUser
class DividerUser extends jni.JObject {
  @override
  late final jni.JObjType<DividerUser> $type = type;

  DividerUser.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"DividerUser");

  /// The type which includes information such as the signature of this class.
  static const type = $DividerUserType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory DividerUser() {
    return DividerUser.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_useDivider = _class.instanceMethodId(
    r"useDivider",
    r"(LDivider;II)I",
  );

  static final _useDivider = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int32,
                        ffi.Int32
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final int useDivider(Divider divider, int i, int i1)
  int useDivider(
    Divider divider,
    int i,
    int i1,
  ) {
    return _useDivider(reference.pointer, _id_useDivider as jni.JMethodIDPtr,
            divider.reference.pointer, i, i1)
        .integer;
  }
}

final class $DividerUserType extends jni.JObjType<DividerUser> {
  const $DividerUserType();

  @override
  String get signature => r"LDividerUser;";

  @override
  DividerUser fromReference(jni.JReference reference) =>
      DividerUser.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DividerUserType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DividerUserType) && other is $DividerUserType;
  }
}

/// from: java.lang.ArithmeticException
class ArithmeticException extends jni.JObject {
  @override
  late final jni.JObjType<ArithmeticException> $type = type;

  ArithmeticException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/lang/ArithmeticException");

  /// The type which includes information such as the signature of this class.
  static const type = $ArithmeticExceptionType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory ArithmeticException() {
    return ArithmeticException.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/lang/String;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory ArithmeticException.new1(
    jni.JString string,
  ) {
    return ArithmeticException.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }
}

final class $ArithmeticExceptionType extends jni.JObjType<ArithmeticException> {
  const $ArithmeticExceptionType();

  @override
  String get signature => r"Ljava/lang/ArithmeticException;";

  @override
  ArithmeticException fromReference(jni.JReference reference) =>
      ArithmeticException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ArithmeticExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ArithmeticExceptionType) &&
        other is $ArithmeticExceptionType;
  }
}
